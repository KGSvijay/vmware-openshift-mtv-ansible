---
- name: Build a list of all the folders
  vmware.vmware_rest.vcenter_folder_info:
  register: all_folders

- name: Filter VM folders
  ansible.builtin.set_fact:
    vm_folders: "{{ all_folders.value | selectattr('type', 'equalto', 'VIRTUAL_MACHINE') | list }}"

- name: Check each VM folder for VMs
  vmware.vmware_rest.vcenter_vm_info:
    folders: "{{ item.folder }}"
  register: vm_folders_with_vms
  loop: "{{ vm_folders }}"
  when: vm_folders | length > 0

- name: Display VM names and IDs
  ansible.builtin.debug:
    msg: "VM Name: {{ item.name }}, VM ID: {{ item.vm }}"
  loop: "{{ vm_folders_with_vms.results | map(attribute='value') | flatten }}"
  when: item | length > 0
  loop_control:
    label: "{{ item.name }}"

- name: Collect VM names and IDs
  ansible.builtin.set_fact:
    vm_name_id_pairs: "{{ vm_name_id_pairs | default([]) + [{'name': item.name, 'vm': item.vm}] }}"
  loop: "{{ vm_folders_with_vms.results | map(attribute='value') | flatten }}"
  when: item | length > 0

- name: Prepare VMs for Plan spec
  ansible.builtin.set_fact:
    vms_for_plan_spec: "{{ vms_for_plan_spec | default([]) + [{'hooks': [], 'id': vm_id.vm}] }}"
  loop: "{{ vm_name_id_pairs }}"
  loop_control:
    loop_var: vm_id
  when: vm_id.name in user_selected_vm_names.split('\n')

- name: Get information for the networks
  vmware.vmware_rest.vcenter_network_info:
  register: all_networks

- name: Capture the portgroup id to make network mappings
  ansible.builtin.set_fact:
    network_mappings: "{{ all_networks.value | map(attribute='network') | list }}"

- name: Create or update a NetworkMap
  redhat.openshift.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: NetworkMap
      metadata:
        name: "{{ networkmap_name }}"
        namespace: apm0002135-non-prod
      spec:
        map: >
          {% for network in network_mappings %}
          - destination:
              type: pod
            source:
              id: "{{ network }}"
          {% endfor %}
        provider:
          destination:
            name: local-cluster
            namespace: apm0002135-non-prod
          source:
            name: vmware
            namespace: apm0002135-non-prod

- name: Build a list of all the datastores
  vmware.vmware_rest.vcenter_datastore_info:
  register: all_the_datastores

- name: Capture the datastore id
  ansible.builtin.set_fact:
    datastore_ids: "{{ all_the_datastores.value | map(attribute='datastore') | list }}"

- name: Create or update a StorageMap
  redhat.openshift.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: StorageMap
      metadata:
        name: "{{ storagemap_name }}"
        namespace: apm0002135-non-prod
      spec:
        map: >
          {% for datastore in datastore_ids %}
          - destination:
              storageClass: portworx-rwx-kubevirt
            source:
              id: "{{ datastore }}"
          {% endfor %}
        provider:
          destination:
            name: local-cluster
            namespace: apm0002135-non-prod
          source:
            name: vmware
            namespace: apm0002135-non-prod
            
- name: Deploy Virt Plan
  redhat.openshift.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: Plan
      metadata:
        name: "{{ plan_name }}"
        namespace: apm0002135-non-prod
      spec:
        archived: false
        description: ''
        map:
          network:
            name: "{{ networkmap_name }}"
            namespace: apm0002135-non-prod
          storage:
            name: "{{ storagemap_name }}"
            namespace: apm0002135-non-prod
        provider:
          destination:          
            name: local-cluster
            namespace: apm0002135-non-prod
          source:
            name: vmware
            namespace: apm0002135-non-prod            
        targetNamespace: apm0002135-non-prod
        vms: "{{ vms_for_plan_spec }}"
        warm: "{{ migration_type == 'cold' }}"

- name: Create a Migration manifest to run the Plan CR
  redhat.openshift.k8s:
    state: present
    api_version: forklift.konveyor.io/v1beta1
    kind: Migration
    namespace: apm0002135-non-prod
    name: "{{ plan_name }}"
    definition:
      metadata:
        name: "{{ plan_name }}"
        namespace: apm0002135-non-prod
      spec:
        plan:
          name: "{{ plan_name }}"
          namespace: apm0002135-non-prod
