# Step 1: Convert User-Selected VM Names to List
- name: Convert user-selected VM names to list
  ansible.builtin.set_fact:
    user_selected_vm_list: "{{ user_selected_vm_names.split('\n') | map('trim') }}"

- name: Debug user_selected_vm_list
  ansible.builtin.debug:
    msg: "{{ user_selected_vm_list }}"

# Step 2: Fetch Detailed Information about VMs Using `community.vmware.vmware_vm_info`
- name: Fetch detailed information about VMs
  community.vmware.vmware_vm_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    name: "{{ item }}"
  loop: "{{ user_selected_vm_list }}"
  register: vm_details

- name: Debug vm_details
  ansible.builtin.debug:
    msg: "{{ vm_details }}"

# Step 3: Extract Network and Datastore Information
- name: Initialize lists for network_ids and datastore_ids
  ansible.builtin.set_fact:
    network_ids: []
    datastore_ids: []

- name: Collect network and datastore ids
  ansible.builtin.set_fact:
    network_ids: "{{ network_ids + vm.guest.net | map(attribute='network') | list | unique }}"
    datastore_ids: "{{ datastore_ids + vm.datastore | list | unique }}"
  loop: "{{ vm_details.results | map(attribute='virtual_machines') | flatten }}"
  loop_control:
    loop_var: vm

- name: Ensure network_ids and datastore_ids are captured properly
  ansible.builtin.debug:
    msg: "Network IDs: {{ network_ids }}, Datastore IDs: {{ datastore_ids }}"

# Step 4: Create or Update NetworkMap for Each Unique Network
- name: Create or update a NetworkMap for each unique network
  redhat.openshift.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: NetworkMap
      metadata:
        name: "{{ networkmap_name }}-{{ loop.index }}"
        namespace: apm0002135-non-prod
      spec:
        map:
          - destination:
              type: pod
            source:
              id: "{{ item }}"
        provider:
          destination:
            name: local-cluster
            namespace: apm0002135-non-prod
          source:
            name: "{{ provider_name }}"
            namespace: apm0002135-non-prod
  loop: "{{ network_ids }}"

# Step 5: Create or Update StorageMap for Each Unique Datastore
- name: Create or update a StorageMap for each unique datastore
  redhat.openshift.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: StorageMap
      metadata:
        name: "{{ storagemap_name }}-{{ loop.index }}"
        namespace: apm0002135-non-prod
      spec:
        map:
          - destination:
              storageClass: portworx-rwx-kubevirt
            source:
              id: "{{ item }}"
        provider:
          destination:
            name: local-cluster
            namespace: apm0002135-non-prod
          source:
            name: "{{ provider_name }}"
            namespace: apm0002135-non-prod
  loop: "{{ datastore_ids }}"

# Step 6: Prepare VMs for Plan Spec Based on vm_details
- name: Prepare VMs for Plan spec
  ansible.builtin.set_fact:
    vms_for_plan_spec: "{{ vms_for_plan_spec | default([]) + [{'hooks': [], 'id': vm.vm }] }}"
  loop: "{{ vm_details.results | map(attribute='virtual_machines') | flatten }}"
  loop_control:
    loop_var: vm

# Step 7: Deploy Virt Plan
- name: Deploy Virt Plan
  redhat.openshift.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: Plan
      metadata:
        name: "{{ plan_name }}"
        namespace: apm0002135-non-prod
      spec:
        archived: false
        description: ''
        map:
          network:
            name: "{{ networkmap_name }}"
            namespace: apm0002135-non-prod
          storage:
            name: "{{ storagemap_name }}"
            namespace: apm0002135-non-prod
        provider:
          destination:
            name: local-cluster
            namespace: apm0002135-non-prod
          source:
            name: "{{ provider_name }}"
            namespace: apm0002135-non-prod
        targetNamespace: apm0002135-non-prod
        vms: "{{ vms_for_plan_spec }}"
        warm: false

# Step 8: Create a Migration Manifest to Run the Plan CR
- name: Create a Migration manifest to run the Plan CR
  redhat.openshift.k8s:
    api_version: forklift.konveyor.io/v1beta1
    kind: Migration
    namespace: apm0002135-non-prod
    name: "{{ plan_name }}"
    definition:
      metadata:
        name: "{{ plan_name }}"
        namespace: apm0002135-non-prod
      spec:
        plan:
          name: "{{ plan_name }}"
          namespace: apm0002135-non-prod
