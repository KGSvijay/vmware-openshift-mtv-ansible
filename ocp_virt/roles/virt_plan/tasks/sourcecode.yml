---
# Step 1: Build a list of all the folders
- name: Build a list of all the folders
  vmware.vmware_rest.vcenter_folder_info:
    vcenter_hostname: "{{ vcenter_hostname }}"
    vcenter_username: "{{ vcenter_username }}"
    vcenter_password: "{{ vcenter_password }}"
    vcenter_validate_certs: no
  register: all_folders

# Step 2: Filter VM folders
- name: Filter VM folders
  ansible.builtin.set_fact:
    vm_folders: "{{ all_folders.value | selectattr('type', 'equalto', 'VIRTUAL_MACHINE') | list }}"

- name: Debug vm_folders
  ansible.builtin.debug:
    msg: "{{ vm_folders }}"

# Step 3: Check each VM folder for VMs
- name: Check each VM folder for VMs
  vmware.vmware_rest.vcenter_vm_info:
    folders: "{{ item.folder }}"
    vcenter_hostname: "{{ vcenter_hostname }}"
    vcenter_username: "{{ vcenter_username }}"
    vcenter_password: "{{ vcenter_password }}"
    vcenter_validate_certs: no
  register: vm_folders_with_vms
  loop: "{{ vm_folders }}"
  when: vm_folders | length > 0

- name: Debug VM folder information
  ansible.builtin.debug:
    msg: "{{ vm_folders_with_vms }}"

# Step 4: Display VM names and IDs
- name: Display VM names and IDs
  ansible.builtin.debug:
    msg: "VM Name: {{ item.name }}, VM ID: {{ item.vm }}"
  loop: "{{ vm_folders_with_vms.results | map(attribute='value') | flatten }}"
  when: item | length > 0
  loop_control:
    label: "{{ item.name }}"

# Step 5: Collect VM names and IDs
- name: Collect VM names and IDs
  ansible.builtin.set_fact:
    vm_name_id_pairs: "{{ vm_name_id_pairs | default([]) + [{'name': item.name, 'vm': item.vm}] }}"
  loop: "{{ vm_folders_with_vms.results | map(attribute='value') | flatten }}"
  when: item | length > 0

# Step 6: Prepare VMs for Plan spec
- name: Prepare VMs for Plan spec
  ansible.builtin.set_fact:
    vms_for_plan_spec: "{{ vms_for_plan_spec | default([]) + [{'hooks': [], 'id': vm_id.vm}] }}"
  loop: "{{ vm_name_id_pairs }}"
  loop_control:
    loop_var: vm_id
  when: vm_id.name in user_selected_vm_names.split('\n')

# Step 7: Get information for the distributed port group 'segment-migrating-to-ocpvirt'
- name: Get information for the distributed port group 'segment-migrating-to-ocpvirt'
  vmware.vmware_rest.vcenter_network_info:
    vcenter_hostname: "{{ vcenter_hostname }}"
    vcenter_username: "{{ vcenter_username }}"
    vcenter_password: "{{ vcenter_password }}"
    vcenter_validate_certs: no
    filter_types: DISTRIBUTED_PORTGROUP
  register: my_portgroup

# Step 8: Capture the distributed portgroup id to make network mappings
- name: Capture the distributed portgroup id to make network mappings
  ansible.builtin.set_fact:
    portgroup_id: "{{ my_portgroup.value[0].network }}"

# Step 9: Create or update a NetworkMap
- name: Create or update a NetworkMap
  redhat.openshift.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: NetworkMap
      metadata:
        name: "{{ networkmap_name }}"
        namespace: apm0002135-non-prod
      spec:
        map:
          - destination:
              type: pod
            source:
              id: "{{ portgroup_id }}"
        provider:
          destination:
            name: local-cluster
            namespace: apm0002135-non-prod
          source:
            name: "{{ vmware_host }}"
            namespace: apm0002135-non-prod

# Step 10: Build a list of all the datastores
- name: Build a list of all the datastores
  vmware.vmware_rest.vcenter_datastore_info:
    vcenter_hostname: "{{ vcenter_hostname }}"
    vcenter_username: "{{ vcenter_username }}"
    vcenter_password: "{{ vcenter_password }}"
    vcenter_validate_certs: no
  register: all_the_datastores

# Step 11: Capture the datastore id
- name: Capture the datastore id
  ansible.builtin.set_fact:
    datastore_id: "{{ all_the_datastores.value[0].datastore }}"

# Step 12: Create or update a StorageMap
- name: Create or update a StorageMap
  redhat.openshift.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: StorageMap
      metadata:
        name: "{{ storagemap_name }}"
        namespace: apm0002135-non-prod
      spec:
        map:
          - destination:
              storageClass: portworx-rwx-kubevirt
            source:
              id: "{{ datastore_id }}"
        provider:
          destination:
            name: local-cluster
            namespace: apm0002135-non-prod
          source:
            name: "{{ vmware_host }}"
            namespace: apm0002135-non-prod

# Step 13: Deploy Virt Plan
- name: Deploy Virt Plan
  redhat.openshift.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: Plan
      metadata:
        name: "{{ plan_name }}"
        namespace: apm0002135-non-prod
      spec:
        archived: false
        description: ''
        map:
          network:
            name: "{{ networkmap_name }}"
            namespace: apm0002135-non-prod
          storage:
            name: "{{ storagemap_name }}"
            namespace: apm0002135-non-prod
        provider:
          destination:
            name: local-cluster
            namespace: apm0002135-non-prod
          source:
            name: "{{ vmware_host }}"
            namespace: apm0002135-non-prod
        targetNamespace: apm0002135-non-prod
        vms: "{{ vms_for_plan_spec }}"
        warm: false

# Step 14: Create a Migration manifest to run the Plan CR
- name: Create a Migration manifest to run the Plan CR
  redhat.openshift.k8s:
    api_version: forklift.konveyor.io/v1beta1
    kind: Migration
    namespace: apm0002135-non-prod
    name: "{{ plan_name }}"
    definition:
      metadata:
        name: "{{ plan_name }}"
        namespace: apm0002135-non-prod
      spec:
        plan:
          name: "{{ plan_name }}"
          namespace: apm0002135-non-prod

